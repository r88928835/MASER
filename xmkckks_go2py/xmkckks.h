/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "export.go"

#include <stdbool.h>
#include <stddef.h>
// #include <complex.h>

typedef struct {
	double* data;
	size_t size;
} Ldouble;

typedef struct {
	long long unsigned int* data;
	size_t size;
} Luint64;

// // Message
// typedef struct {
// 	double complex* data;
// 	size_t size;
// } Message;

// Params
typedef struct {
	Luint64 qi;
	Luint64 pi;

    int logN;
	int logSlots;
	int gamma;

	double scale;
	double sigma;
} Params;

// ParametersLiteral
typedef struct {
	Luint64 qi;
	Luint64 pi;

    int logN;
	int logSlots;

	double scale;
	double sigma;
} ParametersLiteral;

// Poly
typedef struct {
	Luint64* coeffs;
	bool IsNTT;
	bool IsMForm;
	size_t size;
} Poly;

// PolyPair
typedef struct {
	Poly p0;
	Poly p1;
} PolyPair;

// PolyQP
typedef struct {
	Poly* Q;
	Poly* P;
} PolyQP;

// PolyQPPair
typedef struct {
	PolyQP qp0;
	PolyQP qp1;
} PolyQPPair;

// Share
typedef struct {
	Poly* data;
	size_t size;
} Share;

// Ciphertext
typedef struct {
	Poly* data;
	size_t size;
	int* idxs;

	double scale;
	// bool isNTT;
} Ciphertext;

// Data
typedef struct {
	Ciphertext* data;
	size_t size;
} Data;

// MPHEServer
typedef struct {
	// Params params;
	ParametersLiteral paramsLiteral;
	Poly crs;
	PolyQP sk;
	PolyQPPair pk;
	Data data;
	int idx;
} MPHEServer;


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern MPHEServer* newMPHEServer(int user_idx);
extern Ciphertext* encryptFromPk(PolyQPPair* pk, double* array, size_t arraySize, int user_idx);
extern Ciphertext* partialDecrypt(PolyQP* sk, Ciphertext* ciphertext, int user_idx);
extern Ciphertext* ringQAddLvl(Ciphertext* op1, int op1_id, Ciphertext* op2, int op2_id);
extern Poly* addRingPs(Poly* ringP1, Poly* ringP2);
extern Ldouble* decodeAfterPartialDecrypt(Ciphertext* ciphertext);
extern Ciphertext* addCTs(Ciphertext* op1, Ciphertext* op2);
extern Ciphertext* multiplyCTConst(Ciphertext* op1, double op2);

#ifdef __cplusplus
}
#endif
